-- VHDL Entity alien_game_lib.c5_t1_gamma_controller.symbol
--
-- Created:
--          by - roope.UNKNOWN (DESKTOP-N94PERP)
--          at - 20:16:54 19.11.2019
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2019.3 (Build 4)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_arith.all;

ENTITY c5_t1_gamma_controller IS
   PORT( 
      clk        : IN     std_logic;
      datat_sent : IN     std_logic;
      rst        : IN     std_logic;
      rx_rdy     : IN     std_logic;
      lat        : OUT    std_logic;
      next_value : OUT    std_logic;
      sb         : OUT    std_logic;
      transmit   : OUT    std_logic
   );

-- Declarations

END c5_t1_gamma_controller ;

--
-- VHDL Architecture alien_game_lib.c5_t1_gamma_controller.fsm
--
-- Created:
--          by - roope.UNKNOWN (DESKTOP-N94PERP)
--          at - 20:16:54 19.11.2019
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2019.3 (Build 4)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_arith.all;
 
ARCHITECTURE fsm OF c5_t1_gamma_controller IS

   TYPE STATE_TYPE IS (
      wait_rx_rdy,
      transmit_bit,
      prepare_next_value,
      pulse_latch,
      set_sb
   );
 
   -- Declare current and next state signals
   SIGNAL current_state : STATE_TYPE;
   SIGNAL next_state : STATE_TYPE;

BEGIN

   -----------------------------------------------------------------
   clocked_proc : PROCESS ( 
      clk,
      rst
   )
   -----------------------------------------------------------------
   BEGIN
      IF (rst = '0') THEN
         current_state <= wait_rx_rdy;
      ELSIF (clk'EVENT AND clk = '1') THEN
         current_state <= next_state;
      END IF;
   END PROCESS clocked_proc;
 
   -----------------------------------------------------------------
   nextstate_proc : PROCESS ( 
      current_state,
      datat_sent,
      rx_rdy
   )
   -----------------------------------------------------------------
   BEGIN
      CASE current_state IS
         WHEN wait_rx_rdy => 
            IF (datat_sent = '1') THEN 
               next_state <= pulse_latch;
            ELSIF (rx_rdy = '0') THEN 
               next_state <= wait_rx_rdy;
            ELSIF (rx_rdy = '1') THEN 
               next_state <= transmit_bit;
            ELSE
               next_state <= wait_rx_rdy;
            END IF;
         WHEN transmit_bit => 
            IF (datat_sent = '1') THEN 
               next_state <= pulse_latch;
            ELSE
               next_state <= prepare_next_value;
            END IF;
         WHEN prepare_next_value => 
            IF (datat_sent = '1') THEN 
               next_state <= pulse_latch;
            ELSE
               next_state <= wait_rx_rdy;
            END IF;
         WHEN pulse_latch => 
            next_state <= set_sb;
         WHEN set_sb => 
            next_state <= set_sb;
         WHEN OTHERS =>
            next_state <= wait_rx_rdy;
      END CASE;
   END PROCESS nextstate_proc;
 
   -----------------------------------------------------------------
   output_proc : PROCESS ( 
      current_state
   )
   -----------------------------------------------------------------
   BEGIN
      -- Default Assignment
      lat <= '0';
      next_value <= '0';
      sb <= '0';
      transmit <= '0';

      -- Combined Actions
      CASE current_state IS
         WHEN transmit_bit => 
            transmit <= '1' ;
         WHEN prepare_next_value => 
            next_value <= '1' ;
         WHEN pulse_latch => 
            lat <= '1' ;
         WHEN set_sb => 
            sb <= '1' ;
         WHEN OTHERS =>
            NULL;
      END CASE;
   END PROCESS output_proc;
 
END fsm;
