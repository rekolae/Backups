-- VHDL Entity alien_game_lib.c3_t2_write_sequencer.symbol
--
-- Created:
--          by - rekolae.UNKNOWN (HTC219-713-SPC)
--          at - 13:00:55 30.10.2019
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2019.3 (Build 4)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_arith.all;

ENTITY c3_t2_write_sequencer IS
   PORT( 
      alien_defeated : IN     std_logic;
      bypass         : IN     std_logic;
      clk            : IN     std_logic;
      rst_n          : IN     std_logic;
      write_ready    : IN     std_logic;
      enable         : OUT    std_logic;
      frame_done     : OUT    std_logic;
      gun_px_idx     : OUT    std_logic_vector (1 DOWNTO 0);
      module_select  : OUT    std_logic_vector (1 DOWNTO 0);
      write          : OUT    std_logic
   );

-- Declarations

END c3_t2_write_sequencer ;

--
-- VHDL Architecture alien_game_lib.c3_t2_write_sequencer.fsm
--
-- Created:
--          by - keskiner.UNKNOWN (HTC219-707-SPC)
--          at - 10:37:47 28.11.2019
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2019.3 (Build 4)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_arith.all;
 
ARCHITECTURE fsm OF c3_t2_write_sequencer IS

   TYPE STATE_TYPE IS (
      Init,
      select_alien,
      write0_1,
      select_gun,
      write0_2,
      gun_pix_01,
      gun_pix_10,
      gun_pix_11,
      write0_5,
      set_0,
      set_frame_done,
      enable_up,
      enable_dwn,
      wait_9000000,
      select_bullet,
      write0_6,
      s0,
      s1,
      s2,
      s3,
      s4,
      s5,
      s6,
      s7
   );
 
   -- Declare current and next state signals
   SIGNAL current_state : STATE_TYPE;
   SIGNAL next_state : STATE_TYPE;
   -- pragma synthesis_off
   SIGNAL hds_next,hds_current,hds_clock: INTEGER;
   -- pragma synthesis_on

   -- Declare Wait State internal signals
   SIGNAL csm_timer : std_logic_vector(23 DOWNTO 0);
   SIGNAL csm_next_timer : std_logic_vector(23 DOWNTO 0);
   SIGNAL csm_timeout : std_logic;
   SIGNAL csm_to_wait_9000000 : std_logic;
   SIGNAL csm_to_s0 : std_logic;
   SIGNAL csm_to_s3 : std_logic;
   SIGNAL csm_to_s7 : std_logic;

BEGIN

   -----------------------------------------------------------------
   clocked_proc : PROCESS ( 
      clk,
      rst_n
   )
   -----------------------------------------------------------------
   BEGIN
      IF (rst_n = '0') THEN
         current_state <= Init;
         csm_timer <= (OTHERS => '0');
         -- pragma synthesis_off
         hds_current <= 0;
         -- pragma synthesis_on
      ELSIF (clk'EVENT AND clk = '1') THEN
         current_state <= next_state;
         csm_timer <= csm_next_timer;
         -- pragma synthesis_off
         hds_current <= hds_next;
         hds_clock <= -1;
         hds_clock <= 0;
         -- pragma synthesis_on
      END IF;
   END PROCESS clocked_proc;
 
   -----------------------------------------------------------------
   nextstate_proc : PROCESS ( 
      alien_defeated,
      bypass,
      csm_timeout,
      current_state,
      write_ready
   )
   -----------------------------------------------------------------
   BEGIN
      -- Default assignments to Wait State entry flags
      csm_to_wait_9000000 <= '0';
      csm_to_s0 <= '0';
      csm_to_s3 <= '0';
      csm_to_s7 <= '0';
      CASE current_state IS
         WHEN Init => 
            IF (write_ready = '1') THEN 
               next_state <= select_alien;
               -- pragma synthesis_off
               hds_next <= 1;
               -- pragma synthesis_on
            ELSE
               next_state <= Init;
               -- pragma synthesis_off
               hds_next <= 0;
               -- pragma synthesis_on
            END IF;
         WHEN select_alien => 
            IF (write_ready = '1') THEN 
               next_state <= write0_1;
               -- pragma synthesis_off
               hds_next <= 2;
               -- pragma synthesis_on
            ELSE
               next_state <= select_alien;
               -- pragma synthesis_off
               hds_next <= 0;
               -- pragma synthesis_on
            END IF;
         WHEN write0_1 => 
            IF (write_ready = '1') THEN 
               next_state <= select_gun;
               -- pragma synthesis_off
               hds_next <= 3;
               -- pragma synthesis_on
            ELSE
               next_state <= write0_1;
               -- pragma synthesis_off
               hds_next <= 0;
               -- pragma synthesis_on
            END IF;
         WHEN select_gun => 
            IF (write_ready = '1') THEN 
               next_state <= write0_2;
               -- pragma synthesis_off
               hds_next <= 4;
               -- pragma synthesis_on
            ELSE
               next_state <= select_gun;
               -- pragma synthesis_off
               hds_next <= 0;
               -- pragma synthesis_on
            END IF;
         WHEN write0_2 => 
            IF (write_ready = '1') THEN 
               next_state <= gun_pix_01;
               -- pragma synthesis_off
               hds_next <= 5;
               -- pragma synthesis_on
            ELSE
               next_state <= write0_2;
               -- pragma synthesis_off
               hds_next <= 0;
               -- pragma synthesis_on
            END IF;
         WHEN gun_pix_01 => 
            IF (write_ready = '1') THEN 
               next_state <= gun_pix_10;
               -- pragma synthesis_off
               hds_next <= 6;
               -- pragma synthesis_on
            ELSE
               next_state <= gun_pix_01;
               -- pragma synthesis_off
               hds_next <= 0;
               -- pragma synthesis_on
            END IF;
         WHEN gun_pix_10 => 
            IF (write_ready = '1') THEN 
               next_state <= gun_pix_11;
               -- pragma synthesis_off
               hds_next <= 7;
               -- pragma synthesis_on
            ELSE
               next_state <= gun_pix_10;
               -- pragma synthesis_off
               hds_next <= 0;
               -- pragma synthesis_on
            END IF;
         WHEN gun_pix_11 => 
            IF (write_ready = '1') THEN 
               next_state <= write0_5;
               -- pragma synthesis_off
               hds_next <= 8;
               -- pragma synthesis_on
            ELSE
               next_state <= gun_pix_11;
               -- pragma synthesis_off
               hds_next <= 0;
               -- pragma synthesis_on
            END IF;
         WHEN write0_5 => 
            IF (write_ready = '1') THEN 
               next_state <= s0;
               csm_to_s0 <= '1';
               -- pragma synthesis_off
               hds_next <= 9;
               -- pragma synthesis_on
            ELSE
               next_state <= write0_5;
               -- pragma synthesis_off
               hds_next <= 0;
               -- pragma synthesis_on
            END IF;
         WHEN set_0 => 
            IF (write_ready = '1') THEN 
               next_state <= set_frame_done;
               -- pragma synthesis_off
               hds_next <= 10;
               -- pragma synthesis_on
            ELSE
               next_state <= set_0;
               -- pragma synthesis_off
               hds_next <= 0;
               -- pragma synthesis_on
            END IF;
         WHEN set_frame_done => 
            next_state <= enable_up;
            -- pragma synthesis_off
            hds_next <= 11;
            -- pragma synthesis_on
         WHEN enable_up => 
            next_state <= enable_dwn;
            -- pragma synthesis_off
            hds_next <= 12;
            -- pragma synthesis_on
         WHEN enable_dwn => 
            IF (bypass = '1') THEN 
               next_state <= select_alien;
               -- pragma synthesis_off
               hds_next <= 13;
               -- pragma synthesis_on
            ELSE
               next_state <= wait_9000000;
               csm_to_wait_9000000 <= '1';
               -- pragma synthesis_off
               hds_next <= 14;
               -- pragma synthesis_on
            END IF;
         WHEN wait_9000000 => 
            IF (csm_timeout = '1' AND (write_ready = '1')) THEN 
               next_state <= s1;
               -- pragma synthesis_off
               hds_next <= 15;
               -- pragma synthesis_on
            ELSE
               next_state <= wait_9000000;
               -- pragma synthesis_off
               hds_next <= 0;
               -- pragma synthesis_on
            END IF;
         WHEN select_bullet => 
            IF (write_ready = '1') THEN 
               next_state <= write0_6;
               -- pragma synthesis_off
               hds_next <= 16;
               -- pragma synthesis_on
            ELSE
               next_state <= select_bullet;
               -- pragma synthesis_off
               hds_next <= 0;
               -- pragma synthesis_on
            END IF;
         WHEN write0_6 => 
            IF (write_ready = '1') THEN 
               next_state <= set_0;
               -- pragma synthesis_off
               hds_next <= 17;
               -- pragma synthesis_on
            ELSE
               next_state <= write0_6;
               -- pragma synthesis_off
               hds_next <= 0;
               -- pragma synthesis_on
            END IF;
         WHEN s0 => 
            IF (csm_timeout = '1') THEN 
               next_state <= select_bullet;
               -- pragma synthesis_off
               hds_next <= 18;
               -- pragma synthesis_on
            ELSE
               next_state <= s0;
               -- pragma synthesis_off
               hds_next <= 0;
               -- pragma synthesis_on
            END IF;
         WHEN s1 => 
            IF (alien_defeated = '0') THEN 
               next_state <= select_alien;
               -- pragma synthesis_off
               hds_next <= 19;
               -- pragma synthesis_on
            ELSIF (alien_defeated = '1') THEN 
               next_state <= s2;
               -- pragma synthesis_off
               hds_next <= 20;
               -- pragma synthesis_on
            ELSE
               next_state <= s1;
               -- pragma synthesis_off
               hds_next <= 0;
               -- pragma synthesis_on
            END IF;
         WHEN s2 => 
            IF (write_ready = '1') THEN 
               next_state <= s4;
               -- pragma synthesis_off
               hds_next <= 21;
               -- pragma synthesis_on
            ELSIF (write_ready = '0') THEN 
               next_state <= s2;
               -- pragma synthesis_off
               hds_next <= 22;
               -- pragma synthesis_on
            ELSE
               next_state <= s2;
               -- pragma synthesis_off
               hds_next <= 0;
               -- pragma synthesis_on
            END IF;
         WHEN s3 => 
            IF (csm_timeout = '1') THEN 
               next_state <= s5;
               -- pragma synthesis_off
               hds_next <= 23;
               -- pragma synthesis_on
            ELSE
               next_state <= s3;
               -- pragma synthesis_off
               hds_next <= 0;
               -- pragma synthesis_on
            END IF;
         WHEN s4 => 
            IF (write_ready = '1') THEN 
               next_state <= s3;
               csm_to_s3 <= '1';
               -- pragma synthesis_off
               hds_next <= 24;
               -- pragma synthesis_on
            ELSE
               next_state <= s4;
               -- pragma synthesis_off
               hds_next <= 0;
               -- pragma synthesis_on
            END IF;
         WHEN s5 => 
            IF (write_ready = '1') THEN 
               next_state <= s6;
               -- pragma synthesis_off
               hds_next <= 25;
               -- pragma synthesis_on
            ELSE
               next_state <= s5;
               -- pragma synthesis_off
               hds_next <= 0;
               -- pragma synthesis_on
            END IF;
         WHEN s6 => 
            next_state <= s7;
            csm_to_s7 <= '1';
            -- pragma synthesis_off
            hds_next <= 26;
            -- pragma synthesis_on
         WHEN s7 => 
            IF (csm_timeout = '1') THEN 
               next_state <= s2;
               -- pragma synthesis_off
               hds_next <= 27;
               -- pragma synthesis_on
            ELSE
               next_state <= s7;
               -- pragma synthesis_off
               hds_next <= 0;
               -- pragma synthesis_on
            END IF;
         WHEN OTHERS =>
            next_state <= Init;
            -- pragma synthesis_off
            hds_next <= 0;
            -- pragma synthesis_on
      END CASE;
   END PROCESS nextstate_proc;
 
   -----------------------------------------------------------------
   output_proc : PROCESS ( 
      current_state
   )
   -----------------------------------------------------------------
   BEGIN
      -- Default Assignment
      enable <= '0';
      frame_done <= '0';
      gun_px_idx <= "00";
      module_select <= "00";
      write <= '0';

      -- Combined Actions
      CASE current_state IS
         WHEN select_alien => 
            module_select <= "00" ;
            write <= '1' ;
         WHEN write0_1 => 
            write <= '0' ;
         WHEN select_gun => 
            module_select <= "01";
            gun_px_idx <= "00" ;
            write <= '1' ;
         WHEN write0_2 => 
            write <= '0' ;
            module_select <= "01";
         WHEN gun_pix_01 => 
            module_select <= "01";
            gun_px_idx <= "01" ;
            write <= '1' ;
         WHEN gun_pix_10 => 
            write <= '1';
            gun_px_idx <= "10";
            module_select <= "01";
         WHEN gun_pix_11 => 
            write <= '1' ;
            gun_px_idx <= "11";
            module_select <= "01";
         WHEN write0_5 => 
            write <= '0' ;
            gun_px_idx <= "00";
            module_select <= "10";
         WHEN set_0 => 
            module_select <= "00" ;
            gun_px_idx <= "00" ;
         WHEN set_frame_done => 
            frame_done <= '1' ;
         WHEN enable_up => 
            enable <= '1' ;
         WHEN enable_dwn => 
            enable <= '0' ;
         WHEN select_bullet => 
            module_select <= "10";
            write <= '1';
         WHEN write0_6 => 
            write <= '0' ;
         WHEN s2 => 
            module_select <= "11" ;
            frame_done <= '0' ;
         WHEN s3 => 
            write <= '1' ;
            module_select <= "11" ;
         WHEN s4 => 
            module_select <= "11" ;
            write <= '1' ;
         WHEN s5 => 
            write <= '0' ;
         WHEN s6 => 
            frame_done <= '1' ;
         WHEN OTHERS =>
            NULL;
      END CASE;
   END PROCESS output_proc;
 
   -----------------------------------------------------------------
   csm_wait_combo_proc: PROCESS (
      csm_timer,
      csm_to_wait_9000000,
      csm_to_s0,
      csm_to_s3,
      csm_to_s7
   )
   -----------------------------------------------------------------
   VARIABLE csm_temp_timeout : std_logic;
   BEGIN
      IF (unsigned(csm_timer) = 0) THEN
         csm_temp_timeout := '1';
      ELSE
         csm_temp_timeout := '0';
      END IF;

      IF (csm_to_wait_9000000 = '1') THEN
         csm_next_timer <= "100010010101010000111111"; -- no cycles(9000000)-1=8999999
      ELSIF (csm_to_s0 = '1') THEN
         csm_next_timer <= "000000000000000000000101"; -- no cycles(6)-1=5
      ELSIF (csm_to_s3 = '1') THEN
         csm_next_timer <= "000000000000000000001001"; -- no cycles(10)-1=9
      ELSIF (csm_to_s7 = '1') THEN
         csm_next_timer <= "100010010101010000111111"; -- no cycles(9000000)-1=8999999
      ELSE
         IF (csm_temp_timeout = '1') THEN
            csm_next_timer <= (OTHERS=>'0');
         ELSE
            csm_next_timer <= unsigned(csm_timer) - '1';
         END IF;
      END IF;
      csm_timeout <= csm_temp_timeout;
   END PROCESS csm_wait_combo_proc;

END fsm;
