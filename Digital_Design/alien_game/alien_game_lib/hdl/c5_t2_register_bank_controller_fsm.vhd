-- VHDL Entity alien_game_lib.c5_t2_register_bank_controller.symbol
--
-- Created:
--          by - roope.UNKNOWN (ROOPE-PC)
--          at - 16:47:10 20.11.2019
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2019.3 (Build 4)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_arith.all;

ENTITY c5_t2_register_bank_controller IS
   PORT( 
      clk        : IN     std_logic;
      frame_done : IN     std_logic;
      rst        : IN     std_logic;
      ctrl       : OUT    std_logic;
      nullify1   : OUT    std_logic;
      nullify2   : OUT    std_logic;
      w_rdy      : OUT    std_logic
   );

-- Declarations

END c5_t2_register_bank_controller ;

--
-- VHDL Architecture alien_game_lib.c5_t2_register_bank_controller.fsm
--
-- Created:
--          by - roope.UNKNOWN (ROOPE-PC)
--          at - 16:47:10 20.11.2019
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2019.3 (Build 4)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_arith.all;
 
ARCHITECTURE fsm OF c5_t2_register_bank_controller IS

   TYPE STATE_TYPE IS (
      s0,
      s1,
      s2,
      s3
   );
 
   -- Declare current and next state signals
   SIGNAL current_state : STATE_TYPE;
   SIGNAL next_state : STATE_TYPE;

BEGIN

   -----------------------------------------------------------------
   clocked_proc : PROCESS ( 
      clk,
      rst
   )
   -----------------------------------------------------------------
   BEGIN
      IF (rst = '0') THEN
         current_state <= s0;
      ELSIF (clk'EVENT AND clk = '1') THEN
         current_state <= next_state;
      END IF;
   END PROCESS clocked_proc;
 
   -----------------------------------------------------------------
   nextstate_proc : PROCESS ( 
      current_state,
      frame_done
   )
   -----------------------------------------------------------------
   BEGIN
      CASE current_state IS
         WHEN s0 => 
            IF (frame_done = '1') THEN 
               next_state <= s1;
            ELSIF (frame_done = '0') THEN 
               next_state <= s0;
            ELSE
               next_state <= s0;
            END IF;
         WHEN s1 => 
            next_state <= s2;
         WHEN s2 => 
            IF (frame_done = '0') THEN 
               next_state <= s2;
            ELSIF (frame_done = '1') THEN 
               next_state <= s3;
            ELSE
               next_state <= s2;
            END IF;
         WHEN s3 => 
            next_state <= s0;
         WHEN OTHERS =>
            next_state <= s0;
      END CASE;
   END PROCESS nextstate_proc;
 
   -----------------------------------------------------------------
   output_proc : PROCESS ( 
      current_state
   )
   -----------------------------------------------------------------
   BEGIN
      -- Default Assignment
      ctrl <= '0';
      nullify1 <= '0';
      nullify2 <= '0';
      w_rdy <= '1';

      -- Combined Actions
      CASE current_state IS
         WHEN s0 => 
            ctrl <= '0' ;
            w_rdy <= '1' ;
            nullify2 <= '0';
         WHEN s1 => 
            ctrl <= '1' ;
            w_rdy <= '0';
            nullify1 <= '1' ;
         WHEN s2 => 
            ctrl <= '1' ; 
            w_rdy <= '1' ;
            nullify1 <= '0' ;
         WHEN s3 => 
            ctrl <= '0' ;
            w_rdy <= '0';
            nullify2 <= '1' ;
         WHEN OTHERS =>
            NULL;
      END CASE;
   END PROCESS output_proc;
 
END fsm;
