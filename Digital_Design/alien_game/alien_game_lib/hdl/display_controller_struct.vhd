-- VHDL Entity alien_game_lib.display_controller.symbol
--
-- Created:
--          by - keskiner.UNKNOWN (HTC219-707-SPC)
--          at - 12:02:06 28.11.2019
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2019.3 (Build 4)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_arith.all;

ENTITY display_controller IS
   PORT( 
      clk        : IN     std_logic;
      color_BGR  : IN     std_logic_vector (23 DOWNTO 0);
      frame_done : IN     std_logic;
      rst_n      : IN     std_logic;
      write      : IN     std_logic;
      x_coord    : IN     std_logic_vector (7 DOWNTO 0);
      y_coord    : IN     std_logic_vector (7 DOWNTO 0);
      channel    : OUT    std_logic_vector (7 DOWNTO 0);
      lat        : OUT    std_logic;
      s_clk      : OUT    std_logic;
      s_rst      : OUT    std_logic;
      s_sda      : OUT    std_logic;
      sb         : OUT    std_logic;
      w_rdy      : OUT    std_logic
   );

-- Declarations

END display_controller ;

--
-- VHDL Architecture alien_game_lib.display_controller.struct
--
-- Created:
--          by - keskiner.UNKNOWN (HTC219-707-SPC)
--          at - 12:02:06 28.11.2019
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2019.3 (Build 4)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_arith.all;

LIBRARY alien_game_lib;

ARCHITECTURE struct OF display_controller IS

   -- Architecture declarations

   -- Internal signal declarations
   SIGNAL din0     : std_logic;
   SIGNAL din1     : std_logic;
   SIGNAL din2     : std_logic;
   SIGNAL do_tx    : std_logic;
   SIGNAL done     : std_logic;
   SIGNAL dout     : std_logic;
   SIGNAL dout1    : std_logic;
   SIGNAL dout2    : std_logic;
   SIGNAL dout3    : std_logic;
   SIGNAL lat1     : std_logic;
   SIGNAL lat2     : std_logic;
   SIGNAL pixd_out : std_logic_vector(23 DOWNTO 0);
   SIGNAL ready    : std_logic;
   SIGNAL x        : std_logic_vector(7 DOWNTO 0);
   SIGNAL xr       : std_logic_vector(7 DOWNTO 0);

   -- Implicit buffer signal declarations
   SIGNAL sb_internal : std_logic;


   -- Component Declarations
   COMPONENT c4_t4_shield_initial_reset
   PORT (
      clk   : IN     std_logic ;
      rst_n : IN     std_logic ;
      done  : OUT    std_logic ;
      s_rst : OUT    std_logic 
   );
   END COMPONENT;
   COMPONENT c4_t5_serial_data_transmit
   PORT (
      bit_in   : IN     std_logic ;
      clk      : IN     std_logic ;
      rst_n    : IN     std_logic ;
      transmit : IN     std_logic ;
      ready    : OUT    std_logic ;
      s_clk    : OUT    std_logic ;
      s_sda    : OUT    std_logic 
   );
   END COMPONENT;
   COMPONENT c5_t1_Shield_gamma_set
   PORT (
      clk      : IN     std_logic ;
      rst_n    : IN     std_logic ;
      rx_rdy   : IN     std_logic ;
      bit_out  : OUT    std_logic ;
      lat      : OUT    std_logic ;
      sb       : OUT    std_logic ;
      transmit : OUT    std_logic 
   );
   END COMPONENT;
   COMPONENT c5_t2_register_bank_top
   PORT (
      clk        : IN     std_logic ;
      frame_done : IN     std_logic ;
      pixd_in    : IN     std_logic_vector (23 DOWNTO 0);
      rst_n      : IN     std_logic ;
      write      : IN     std_logic ;
      xr         : IN     std_logic_vector (7 DOWNTO 0);
      xw         : IN     std_logic_vector (7 DOWNTO 0);
      yr         : IN     std_logic_vector (7 DOWNTO 0);
      yw         : IN     std_logic_vector (7 DOWNTO 0);
      pixd_out   : OUT    std_logic_vector (23 DOWNTO 0);
      w_rdy      : OUT    std_logic 
   );
   END COMPONENT;
   COMPONENT serial_led_cannon
   PORT (
      clk     : IN     std_logic;
      pixdata : IN     std_logic_vector (23 DOWNTO 0);
      rst_n   : IN     std_logic;
      run     : IN     std_logic;
      bit_out : OUT    std_logic;
      chans   : OUT    std_logic_vector (7 DOWNTO 0);
      lat     : OUT    std_logic;
      tx      : OUT    std_logic;
      x       : OUT    std_logic_vector (7 DOWNTO 0);
      y       : OUT    std_logic_vector (7 DOWNTO 0)
   );
   END COMPONENT;

   -- Optional embedded configurations
   -- pragma synthesis_off
   FOR ALL : c4_t4_shield_initial_reset USE ENTITY alien_game_lib.c4_t4_shield_initial_reset;
   FOR ALL : c4_t5_serial_data_transmit USE ENTITY alien_game_lib.c4_t5_serial_data_transmit;
   FOR ALL : c5_t1_Shield_gamma_set USE ENTITY alien_game_lib.c5_t1_Shield_gamma_set;
   FOR ALL : c5_t2_register_bank_top USE ENTITY alien_game_lib.c5_t2_register_bank_top;
   FOR ALL : serial_led_cannon USE ENTITY alien_game_lib.serial_led_cannon;
   -- pragma synthesis_on


BEGIN

   -- ModuleWare code(v1.12) for instance 'U_5' of 'and'
   dout <= done AND ready;

   -- ModuleWare code(v1.12) for instance 'U_8' of 'and'
   dout3 <= sb_internal AND ready;

   -- ModuleWare code(v1.12) for instance 'U_6' of 'or'
   dout1 <= din0 OR din1;

   -- ModuleWare code(v1.12) for instance 'U_7' of 'or'
   dout2 <= din2 OR do_tx;

   -- ModuleWare code(v1.12) for instance 'U_9' of 'or'
   lat <= lat1 OR lat2;

   -- Instance port mappings.
   U_4 : c4_t4_shield_initial_reset
      PORT MAP (
         clk   => clk,
         rst_n => rst_n,
         done  => done,
         s_rst => s_rst
      );
   U_1 : c4_t5_serial_data_transmit
      PORT MAP (
         bit_in   => dout1,
         clk      => clk,
         rst_n    => rst_n,
         transmit => dout2,
         ready    => ready,
         s_clk    => s_clk,
         s_sda    => s_sda
      );
   U_2 : c5_t1_Shield_gamma_set
      PORT MAP (
         clk      => clk,
         rst_n    => rst_n,
         rx_rdy   => dout,
         bit_out  => din0,
         lat      => lat1,
         sb       => sb_internal,
         transmit => din2
      );
   U_3 : c5_t2_register_bank_top
      PORT MAP (
         clk        => clk,
         frame_done => frame_done,
         pixd_in    => color_BGR,
         rst_n      => rst_n,
         write      => write,
         xr         => xr,
         xw         => x_coord,
         yr         => x,
         yw         => y_coord,
         pixd_out   => pixd_out,
         w_rdy      => w_rdy
      );
   U_0 : serial_led_cannon
      PORT MAP (
         clk     => clk,
         pixdata => pixd_out,
         rst_n   => rst_n,
         run     => dout3,
         bit_out => din1,
         chans   => channel,
         lat     => lat2,
         tx      => do_tx,
         x       => x,
         y       => xr
      );

   -- Implicit buffered output assignments
   sb <= sb_internal;

END struct;
