-- VHDL Entity alien_game_lib.c5_t2_register_row.symbol
--
-- Created:
--          by - roope.UNKNOWN (ROOPE-PC)
--          at - 12:34:09 20.11.2019
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2019.3 (Build 4)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_arith.all;

ENTITY c5_t2_register_row IS
   PORT( 
      clk      : IN     std_logic;
      nullify  : IN     std_logic;
      pixd_in  : IN     std_logic_vector (23 DOWNTO 0);
      rst_n    : IN     std_logic;
      write    : IN     std_logic;
      xr       : IN     std_logic_vector (7 DOWNTO 0);
      xw       : IN     std_logic_vector (7 DOWNTO 0);
      yr       : IN     std_logic;
      yw       : IN     std_logic;
      pixd_out : OUT    std_logic_vector (23 DOWNTO 0)
   );

-- Declarations

END c5_t2_register_row ;

--
-- VHDL Architecture alien_game_lib.c5_t2_register_row.struct
--
-- Created:
--          by - roope.UNKNOWN (ROOPE-PC)
--          at - 12:34:09 20.11.2019
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2019.3 (Build 4)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_arith.all;

LIBRARY alien_game_lib;

ARCHITECTURE struct OF c5_t2_register_row IS

   -- Architecture declarations

   -- Internal signal declarations
   SIGNAL ctrl       : std_logic_vector(3 DOWNTO 0);
   SIGNAL dout       : std_logic;
   SIGNAL dout1      : std_logic;
   SIGNAL dout2      : std_logic;
   SIGNAL dout3      : std_logic;
   SIGNAL dout4      : std_logic;
   SIGNAL dout5      : std_logic;
   SIGNAL dout6      : std_logic;
   SIGNAL dout7      : std_logic;
   SIGNAL dout8      : std_logic_vector(23 DOWNTO 0);
   SIGNAL pix_d_out  : std_logic_vector(23 DOWNTO 0);
   SIGNAL pix_d_out1 : std_logic_vector(23 DOWNTO 0);
   SIGNAL pix_d_out2 : std_logic_vector(23 DOWNTO 0);
   SIGNAL pix_d_out3 : std_logic_vector(23 DOWNTO 0);
   SIGNAL pix_d_out4 : std_logic_vector(23 DOWNTO 0);
   SIGNAL pix_d_out5 : std_logic_vector(23 DOWNTO 0);
   SIGNAL pix_d_out6 : std_logic_vector(23 DOWNTO 0);
   SIGNAL pix_d_out7 : std_logic_vector(23 DOWNTO 0);


   -- Component Declarations
   COMPONENT c5_t2_register_row_contoller
   PORT (
      xr   : IN     std_logic_vector (7 DOWNTO 0);
      yr   : IN     std_logic ;
      ctrl : OUT    std_logic_vector (3 DOWNTO 0)
   );
   END COMPONENT;
   COMPONENT c5_t2_single_register
   PORT (
      clk       : IN     std_logic ;
      nullify   : IN     std_logic ;
      pix_d     : IN     std_logic_vector (23 DOWNTO 0);
      rst_n     : IN     std_logic ;
      write     : IN     std_logic ;
      pix_d_out : OUT    std_logic_vector (23 DOWNTO 0)
   );
   END COMPONENT;

   -- Optional embedded configurations
   -- pragma synthesis_off
   FOR ALL : c5_t2_register_row_contoller USE ENTITY alien_game_lib.c5_t2_register_row_contoller;
   FOR ALL : c5_t2_single_register USE ENTITY alien_game_lib.c5_t2_single_register;
   -- pragma synthesis_on


BEGIN

   -- ModuleWare code(v1.12) for instance 'U_1' of 'and'
   dout <= xw(0) AND write AND yw;

   -- ModuleWare code(v1.12) for instance 'U_2' of 'and'
   dout1 <= xw(1) AND write AND yw;

   -- ModuleWare code(v1.12) for instance 'U_4' of 'and'
   dout3 <= xw(2) AND write AND yw;

   -- ModuleWare code(v1.12) for instance 'U_6' of 'and'
   dout2 <= xw(3) AND write AND yw;

   -- ModuleWare code(v1.12) for instance 'U_8' of 'and'
   dout7 <= xw(4) AND write AND yw;

   -- ModuleWare code(v1.12) for instance 'U_10' of 'and'
   dout4 <= xw(5) AND write AND yw;

   -- ModuleWare code(v1.12) for instance 'U_12' of 'and'
   dout5 <= xw(6) AND write AND yw;

   -- ModuleWare code(v1.12) for instance 'U_14' of 'and'
   dout6 <= xw(7) AND write AND yw;

   -- ModuleWare code(v1.12) for instance 'U_18' of 'constval'
   dout8 <= x"000000";

   -- ModuleWare code(v1.12) for instance 'U_16' of 'mux'
   u_16combo_proc: PROCESS(dout8, pix_d_out, pix_d_out1, pix_d_out2, 
                           pix_d_out3, pix_d_out4, pix_d_out5, 
                           pix_d_out6, pix_d_out7, ctrl)
   BEGIN
      CASE ctrl IS
      WHEN "0000" => pixd_out <= dout8;
      WHEN "0001" => pixd_out <= pix_d_out;
      WHEN "0010" => pixd_out <= pix_d_out1;
      WHEN "0011" => pixd_out <= pix_d_out2;
      WHEN "0100" => pixd_out <= pix_d_out3;
      WHEN "0101" => pixd_out <= pix_d_out4;
      WHEN "0110" => pixd_out <= pix_d_out5;
      WHEN "0111" => pixd_out <= pix_d_out6;
      WHEN "1000" => pixd_out <= pix_d_out7;
      WHEN OTHERS => pixd_out <= (OTHERS => 'X');
      END CASE;
   END PROCESS u_16combo_proc;

   -- Instance port mappings.
   U_17 : c5_t2_register_row_contoller
      PORT MAP (
         xr   => xr,
         yr   => yr,
         ctrl => ctrl
      );
   U_0 : c5_t2_single_register
      PORT MAP (
         clk       => clk,
         nullify   => nullify,
         pix_d     => pixd_in,
         rst_n     => rst_n,
         write     => dout,
         pix_d_out => pix_d_out
      );
   U_3 : c5_t2_single_register
      PORT MAP (
         clk       => clk,
         nullify   => nullify,
         pix_d     => pixd_in,
         rst_n     => rst_n,
         write     => dout1,
         pix_d_out => pix_d_out1
      );
   U_5 : c5_t2_single_register
      PORT MAP (
         clk       => clk,
         nullify   => nullify,
         pix_d     => pixd_in,
         rst_n     => rst_n,
         write     => dout3,
         pix_d_out => pix_d_out2
      );
   U_7 : c5_t2_single_register
      PORT MAP (
         clk       => clk,
         nullify   => nullify,
         pix_d     => pixd_in,
         rst_n     => rst_n,
         write     => dout2,
         pix_d_out => pix_d_out3
      );
   U_9 : c5_t2_single_register
      PORT MAP (
         clk       => clk,
         nullify   => nullify,
         pix_d     => pixd_in,
         rst_n     => rst_n,
         write     => dout7,
         pix_d_out => pix_d_out4
      );
   U_11 : c5_t2_single_register
      PORT MAP (
         clk       => clk,
         nullify   => nullify,
         pix_d     => pixd_in,
         rst_n     => rst_n,
         write     => dout4,
         pix_d_out => pix_d_out5
      );
   U_13 : c5_t2_single_register
      PORT MAP (
         clk       => clk,
         nullify   => nullify,
         pix_d     => pixd_in,
         rst_n     => rst_n,
         write     => dout5,
         pix_d_out => pix_d_out6
      );
   U_15 : c5_t2_single_register
      PORT MAP (
         clk       => clk,
         nullify   => nullify,
         pix_d     => pixd_in,
         rst_n     => rst_n,
         write     => dout6,
         pix_d_out => pix_d_out7
      );

END struct;
